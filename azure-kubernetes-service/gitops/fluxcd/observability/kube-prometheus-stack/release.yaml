## TODO: Set up resources requests and limits ( only memory limit )
---
apiVersion: helm.toolkit.fluxcd.io/v2beta1
kind: HelmRelease
metadata:
  name: kube-prometheus-stack
  labels:
    app.kubernetes.io/name: kube-prometheus-stack
    app.kubernetes.io/used-case: scrapingMetrics-alerting
spec:
  chart:
    spec:
      ## https://artifacthub.io/packages/helm/prometheus-community/kube-prometheus-stack
      chart: kube-prometheus-stack
      interval: 5m
      sourceRef:
        kind: HelmRepository
        name: prometheus-community
        namespace: flux
      version: 52.1.0
  interval: 5m
  install:
    crds: CreateReplace
  upgrade:
    crds: CreateReplace
  dependsOn:
    - name: external-secrets-operator
      namespace: flux
  ## https://artifacthub.io/packages/helm/prometheus-community/kube-prometheus-stack?modal=values
  values:
    ## As the AKS is a managed services control plane components are not available for scraping.
    ##? ref: https://github.com/prometheus-community/helm-charts/issues/1704#issuecomment-1016516500
    kubeEtcd:
      enabled: false
    kubeControllerManager:
      enabled: false
    kubeScheduler:
      enabled: false
    kubeProxy:
      service:
        selector:
          component: kube-proxy ## label on aks kube-proxy pod
    commonLabels:
      app.kubernetes.io/used-case: metrics-collection-and-visualization
    #################
    ## ALERT MANAGER #
    #################
    alertmanager:
      ingress:
        enabled: true
        ingressClassName: nginx
        annotations:
          nginx.ingress.kubernetes.io/auth-type: basic
          nginx.ingress.kubernetes.io/auth-secret: kube-prom-stack-basic-auth
          cert-manager.io/cluster-issuer: "letsencrypt-prod"
        hosts:
          - alertmanager.k8s.learndevops.in
        paths:
          - "/"
        pathType: ImplementationSpecific
        tls:
          - secretName: kube-prom-stack-alertmanager-tls-cert
            hosts:
              - alertmanager.k8s.learndevops.in
      config:
        # receivers:
        # - name: 'null'
        # - name: discord-prom-stack
        #   webhook_config:
        #     url_file: /etc/alertmanager/secrets/discord-webhook-url ## mounted as secret to alertmanager (alertmanager.alertmanagerSpec.secrets)
        #     max_alerts: 2
        # templates:
        # - '/etc/alertmanager/config/*.tmpl'

      podDisruptionBudget:
        enabled: true
        minAvailable: 1

      alertmanagerSpec:
        useExistingSecret: true
        ##TODO: Not sure secrets vs configSecret
        secrets:
          - discord-webhook-url
        configSecret: discord-webhook-url
        replicas: 2 ## if replica is 1 it is a deadlock due to PDB
        logFormat: json ## better for parsing
        resources: {}
        storage:
          volumeClaimTemplate:
            spec:
              storageClassName: premium-zrs-retain
              accessModes: ["ReadWriteOnce"]
              resources:
                requests:
                  storage: 2Gi
        alertmanagerConfigSelector:
          matchLabels:
            component: alertmanager
            used_case: discord-webhook-url
    #############
    ## GRAFANA ##
    #############
    ## kube-prometheus-stack values for grafana : https://github.com/prometheus-community/helm-charts/blob/main/charts/kube-prometheus-stack/values.yaml#L900
    ## default values from official Chart https://github.com/grafana/helm-charts/blob/main/charts/grafana/values.yaml
    grafana:
      enabled: true
      # forceDeployDashboards: true
      # forceDeployDatasources: true
      defaultDashboardsTimezone: Europe
      plugins:
        - digrich-bubblechart-panel
        - grafana-clock-panel
      replicas: 2
      serviceMonitor:
        enabled: true
        labels:
          release: kube-prometheus-stack
      ingress:
        enabled: true
        ingressClassName: nginx
        annotations:
          cert-manager.io/cluster-issuer: "letsencrypt-prod"
        pathType: ImplementationSpecific
        hosts:
          - grafana.k8s.learndevops.in
        tls:
          - secretName: kube-prom-stack-grafana-tls-cert
            hosts:
              - grafana.k8s.learndevops.in
      resources: {}
      persistence:
        enabled: true
        storageClassName: premium-zrs-retain
        size: 5Gi
      admin:
        existingSecret: grafana-admin
      ##? Grafana ini (config) : https://grafana.com/docs/grafana/latest/setup-grafana/configure-grafana/#users
      grafana.ini:
        users:
          auto_assign_org_role: Viewer
      ##? https://grafana.com/docs/grafana/latest/setup-grafana/configure-security/configure-authentication/github/
      #   auth.github:
      #     enabled: true
      #     client_id: YOUR_GITHUB_APP_CLIENT_ID
      #     client_secret: YOUR_GITHUB_APP_CLIENT_SECRET
      #     scopes: user:email,read:org
      #     auth_url: https://github.com/login/oauth/authorize
      #     token_url: https://github.com/login/oauth/access_token
      #     api_url: https://api.github.com/user
      #     allow_sign_up: true
      #     auto_login: false
      #     team_ids: GrafanaAdmin
      #     allowed_organizations: ["learndevopsdotin"]
      #     # role_attribute_path: [login=='octocat'][0] && GrafanaAdmin || Viewer
      sidecar:
        logLevel: WARN
        resources: {}
        ## TODO: Investigate this side car config
        ### Look for the label and its value on the configmaps and add them to grafana visualisation.
        dashboards:
          enabled: true
          label: grafana_dashboard # Default label on the kube-prometheus-stack deployed dashboards ( upsteam default too )
          labelValue: 1

    ################
    ## PROMETHEUS #
    ################
    prometheusOperator:
      admissionWebhooks:
        # Use certmanager to generate webhook certs
        certManager:
          enabled: true
      resources: {}
    prometheus:
      ingress:
        enabled: true
        ingressClassName: nginx
        annotations:
          nginx.ingress.kubernetes.io/auth-type: basic
          nginx.ingress.kubernetes.io/auth-secret: kube-prom-stack-basic-auth
          cert-manager.io/cluster-issuer: "letsencrypt-prod"
        hosts:
          - prometheus.k8s.learndevops.in
        tls:
          - secretName: kube-prom-stack-prometheus-tls-cert
            hosts:
              - prometheus.k8s.learndevops.in
        paths:
          - "/"
        pathType: ImplementationSpecific
      prometheusSpec:
        logFormat: json
        # priorityClassName: <CREATE_PRIORITY_CLASS>
        storageSpec:
          volumeClaimTemplate:
            spec:
              accessModes: ["ReadWriteOnce"]
              storageClassName: "premium-zrs-retain"
              resources:
                requests:
                  storage: 10Gi
