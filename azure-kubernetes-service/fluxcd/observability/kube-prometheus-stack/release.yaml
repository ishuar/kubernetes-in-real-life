apiVersion: helm.toolkit.fluxcd.io/v2beta1
kind: HelmRelease
metadata:
  name: kube-prometheus-stack
  labels:
    app.kubernetes.io/name: kube-prometheus-stack
    app.kubernetes.io/used-case: scrapingMetrics-alerting
spec:
  chart:
    spec:
      ## https://artifacthub.io/packages/helm/prometheus-community/kube-prometheus-stack
      chart: kube-prometheus-stack
      interval: 5m
      sourceRef:
        kind: HelmRepository
        name: prometheus-community
        namespace: flux
      version: 52.1.0
  interval: 5m
  install:
    crds: CreateReplace
  upgrade:
    crds: CreateReplace
  ## https://artifacthub.io/packages/helm/prometheus-community/kube-prometheus-stack?modal=values
  values:
    commonLabels:
      app.kubernetes.io/used-case: metrics-collection-and-visualization
    alertmanager:
      ingress:
        enabled: true
        ingressClassName: nginx
        annotations:
          cert-manager.io/cluster-issuer: 'letsencrypt-prod'
        hosts:
          - alertmanager.k8s.learndevops.in
        paths:
          - "/"
        pathType: ImplementationSpecific
        tls:
          - secretName: kube-prometheus-stack
            hosts:
              - alertmanager.k8s.learndevops.in
      podDisruptionBudget:
        enabled: true
        minAvailable: 1

      alertmanagerSpec:
        replicas: 2 ## if replica is 1 it is a deadlock due to PDB
        logFormat: json ## better for parsing
        resources: {}
        storage:
          volumeClaimTemplate:
            spec:
              storageClassName: premium-zrs-retain
              accessModes: ["ReadWriteOnce"]
              resources:
                requests:
                  storage: 2Gi
    grafana:
      enabled: false
      forceDeployDashboards: true
      forceDeployDatasources: true
      defaultDashboardsTimezone: Europe

    prometheusOperator:
      admissionWebhooks:
        # Use certmanager to generate webhook certs
        certManager:
          enabled: true
      resources: {}
    prometheus:
      ingress:
        enabled: true
        ingressClassName: nginx
        annotations:
          cert-manager.io/cluster-issuer: 'letsencrypt-prod'
        hosts:
          - prometheus.k8s.learndevops.in
        tls:
          - secretName: kube-prometheus-stack
            hosts:
              - prometheus.k8s.learndevops.in
        paths:
          - "/"
        pathType: ImplementationSpecific
      prometheusSpec:
        logFormat: json
        # priorityClassName: <CREATE_PRIORITY_CLASS>
        storageSpec:
          volumeClaimTemplate:
            spec:
              accessModes: ["ReadWriteOnce"]
              storageClassName: "premium-zrs-retain"
              resources:
                requests:
                  storage: 10Gi